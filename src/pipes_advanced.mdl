namespace "pipes"

# ===== ADVANCED PIPE FEATURES =====
function "init_advanced":
    # Initialize advanced pipe features
    scoreboard objectives add pipes_filter_type dummy
    scoreboard objectives add pipes_priority dummy
    scoreboard objectives add pipes_energy dummy
    scoreboard objectives add pipes_redstone dummy
    
    # Set default values
    scoreboard players set #global pipes_energy 100
    scoreboard players set #global pipes_priority 0

# ===== ITEM FILTERING SYSTEM =====
function "set_source_filter":
    # Set filter for a source (what items to extract)
    execute as @e[type=marker,tag=pipes.source,distance=..3,limit=1] run scoreboard players set @s pipes_filter_type 1
    tellraw @s [{"text":"[PIPES] Source filter set to iron items","color":"aqua"}]

function "set_sink_filter":
    # Set filter for a sink (what items to accept)
    execute as @e[type=marker,tag=pipes.sink,distance=..3,limit=1] run scoreboard players set @s pipes_filter_type 1
    tellraw @s [{"text":"[PIPES] Sink filter set to iron items","color":"aqua"}]

function "extract_from_chest":
    # Extract items from chest based on filter
    if "block ~ ~1 ~ minecraft:chest":
        function pipes:extract_filtered_items

function "extract_filtered_items":
    # Extract items matching the filter from container
    execute store result score #temp pipes_tmp run data get block ~ ~1 ~ Items[{id:"minecraft:iron_ingot"}].Count
    if "score #temp pipes_tmp > 0":
        function pipes:remove_item_from_container

function "remove_item_from_container":
    # Remove one item from the container
    data remove block ~ ~1 ~ Items[{id:"minecraft:iron_ingot"}]
    data modify block ~ ~1 ~ Items[{id:"minecraft:iron_ingot"}].Count set from score #temp pipes_tmp
    scoreboard players remove #temp pipes_tmp 1

# ===== ENERGY SYSTEM =====
function "consume_energy":
    # Consume energy for pipe operations
    scoreboard players remove #global pipes_energy 1
    if "score #global pipes_energy <= 0":
        function pipes:disable_pipes

function "disable_pipes":
    # Disable pipes when out of energy
    tellraw @a [{"text":"[PIPES] Warning: Low energy! Pipes may stop working","color":"red"}]

function "recharge_energy":
    # Recharge energy system
    scoreboard players add #global pipes_energy 10
    if "score #global pipes_energy > 100":
        scoreboard players set #global pipes_energy 100

# ===== REDSTONE CONTROL =====
function "set_redstone_control":
    # Enable redstone control for pipes
    execute as @e[type=marker,tag=pipes.controller,distance=..3,limit=1] run scoreboard players set @s pipes_redstone 1
    tellraw @s [{"text":"[PIPES] Redstone control enabled","color":"aqua"}]

function "check_redstone":
    # Check redstone signal for pipe control
    if "block ~ ~-1 ~ minecraft:redstone_block":
        function pipes:enable_pipe
    else:
        function pipes:disable_pipe

function "enable_pipe":
    # Enable pipe when redstone signal is present
    if "entity @s[tag=pipes.source]":
        tag @s add pipes.active

function "disable_pipe":
    # Disable pipe when no redstone signal
    if "entity @s[tag=pipes.source]":
        tag @s remove pipes.active

# ===== PRIORITY SYSTEM =====
function "set_priority":
    # Set priority for pipe connections (higher = more important)
    execute as @e[type=marker,tag=pipes.controller,distance=..3,limit=1] run scoreboard players set @s pipes_priority 5
    tellraw @s [{"text":"[PIPES] Priority set to 5","color":"aqua"}]

function "process_priority":
    # Process pipes based on priority
    execute as @e[type=marker,tag=pipes.source] run function pipes:check_priority_order

function "check_priority_order":
    # Check if this source has higher priority than others
    if "entity @e[type=marker,tag=pipes.source,scores={pipes_priority=6..}]":
        # Higher priority source exists, don't spawn
        if "score #global pipes_debug = 1":
            tellraw @a [{"text":"[PIPES DEBUG] Higher priority source exists","color":"yellow"}]
    else:
        # No higher priority source, spawn token
        function pipes:spawn_one_token

# ===== DIFFERENT ITEM TYPES =====
function "spawn_diamond_token":
    # Spawn a diamond token instead of iron
    summon item_display ~ ~1 ~ {Tags:["pipes.token","pipes.flow"],item:{id:"minecraft:diamond",count:1b},transformation:{translation:[0.0f,0.0f,0.0f],left_rotation:[0.0f,0.0f,0.0f,1.0f],right_rotation:[0.0f,0.0f,0.0f,1.0f],scale:[0.3f,0.3f,0.3f]},billboard:"fixed"}
    execute as @e[type=item_display,tag=pipes.flow,limit=1,sort=nearest] run scoreboard players set @s pipes_steps 0
    execute as @e[type=item_display,tag=pipes.flow,limit=1,sort=nearest] run scoreboard players set @s pipes_item_count 1

function "spawn_gold_token":
    # Spawn a gold token
    summon item_display ~ ~1 ~ {Tags:["pipes.token","pipes.flow"],item:{id:"minecraft:gold_ingot",count:1b},transformation:{translation:[0.0f,0.0f,0.0f],left_rotation:[0.0f,0.0f,0.0f,1.0f],right_rotation:[0.0f,0.0f,0.0f,1.0f],scale:[0.3f,0.3f,0.3f]},billboard:"fixed"}
    execute as @e[type=item_display,tag=pipes.flow,limit=1,sort=nearest] run scoreboard players set @s pipes_steps 0
    execute as @e[type=item_display,tag=pipes.flow,limit=1,sort=nearest] run scoreboard players set @s pipes_item_count 1

function "spawn_emerald_token":
    # Spawn an emerald token
    summon item_display ~ ~1 ~ {Tags:["pipes.token","pipes.flow"],item:{id:"minecraft:emerald",count:1b},transformation:{translation:[0.0f,0.0f,0.0f],left_rotation:[0.0f,0.0f,0.0f,1.0f],right_rotation:[0.0f,0.0f,0.0f,1.0f],scale:[0.3f,0.3f,0.3f]},billboard:"fixed"}
    execute as @e[type=item_display,tag=pipes.flow,limit=1,sort=nearest] run scoreboard players set @s pipes_steps 0
    execute as @e[type=item_display,tag=pipes.flow,limit=1,sort=nearest] run scoreboard players set @s pipes_item_count 1

# ===== ADVANCED TRANSFER FUNCTIONS =====
function "transfer_diamond_to_container":
    # Transfer diamond to container
    data modify block ~ ~-1 ~ Items append value {Slot:0b,id:"minecraft:diamond",Count:1b}

function "transfer_gold_to_container":
    # Transfer gold to container
    data modify block ~ ~-1 ~ Items append value {Slot:0b,id:"minecraft:gold_ingot",Count:1b}

function "transfer_emerald_to_container":
    # Transfer emerald to container
    data modify block ~ ~-1 ~ Items append value {Slot:0b,id:"minecraft:emerald",Count:1b}

# ===== ADVANCED COMMANDS =====
function "advanced_help":
    tellraw @s [{"text":"=== ADVANCED PIPE COMMANDS ===","color":"gold"}]
    tellraw @s [{"text":"/function pipes:set_source_filter - Set item filter for source","color":"aqua"}]
    tellraw @s [{"text":"/function pipes:set_sink_filter - Set item filter for sink","color":"aqua"}]
    tellraw @s [{"text":"/function pipes:set_redstone_control - Enable redstone control","color":"aqua"}]
    tellraw @s [{"text":"/function pipes:set_priority <1-10> - Set pipe priority","color":"aqua"}]
    tellraw @s [{"text":"/function pipes:recharge_energy - Recharge energy system","color":"aqua"}]
    tellraw @s [{"text":"/function pipes:spawn_diamond_token - Spawn diamond token","color":"yellow"}]
    tellraw @s [{"text":"/function pipes:spawn_gold_token - Spawn gold token","color":"yellow"}]
    tellraw @s [{"text":"/function pipes:spawn_emerald_token - Spawn emerald token","color":"yellow"}]

function "create_smart_source":
    # Create a smart source with filtering
    summon marker ~ ~-1 ~ {Tags:["pipes.controller","pipes.source","pipes.smart"],CustomName:'{"text":"Smart Pipe Source","italic":false}'}
    scoreboard players add #global pipes_connection_id 1
    execute as @e[type=marker,tag=pipes.smart,limit=1,sort=nearest] run scoreboard players set @s pipes_connection_id #global pipes_connection_id
    execute as @e[type=marker,tag=pipes.smart,limit=1,sort=nearest] run scoreboard players set @s pipes_filter_type 1
    tellraw @s [{"text":"[PIPES] Smart source created with filtering","color":"green"}]

function "create_smart_sink":
    # Create a smart sink with filtering
    summon marker ~ ~-1 ~ {Tags:["pipes.controller","pipes.sink","pipes.smart"],CustomName:'{"text":"Smart Pipe Sink","italic":false}'}
    scoreboard players add #global pipes_connection_id 1
    execute as @e[type=marker,tag=pipes.smart,limit=1,sort=nearest] run scoreboard players set @s pipes_connection_id #global pipes_connection_id
    execute as @e[type=marker,tag=pipes.smart,limit=1,sort=nearest] run scoreboard players set @s pipes_filter_type 1
    tellraw @s [{"text":"[PIPES] Smart sink created with filtering","color":"green"}]

# ===== SMART ITEM DETECTION =====
function "detect_item_type":
    # Detect what type of item is in the source container
    if "block ~ ~-1 ~ minecraft:chest":
        execute store result score #temp pipes_tmp run data get block ~ ~-1 ~ Items[{id:"minecraft:diamond"}].Count
        if "score #temp pipes_tmp > 0":
            function pipes:spawn_diamond_token
            return
        
        execute store result score #temp pipes_tmp run data get block ~ ~-1 ~ Items[{id:"minecraft:gold_ingot"}].Count
        if "score #temp pipes_tmp > 0":
            function pipes:spawn_gold_token
            return
        
        execute store result score #temp pipes_tmp run data get block ~ ~-1 ~ Items[{id:"minecraft:emerald"}].Count
        if "score #temp pipes_tmp > 0":
            function pipes:spawn_emerald_token
            return
        
        execute store result score #temp pipes_tmp run data get block ~ ~-1 ~ Items[{id:"minecraft:iron_ingot"}].Count
        if "score #temp pipes_tmp > 0":
            function pipes:create_token
            return
    
    # Default to iron if no specific items found
    function pipes:create_token

# ===== SMART TRANSFER SYSTEM =====
function "smart_transfer":
    # Transfer items based on their type
    if "block ~ ~-1 ~ minecraft:chest":
        # Check what type of item the token represents
        if "entity @s[nbt={item:{id:\"minecraft:diamond\"}}]":
            function pipes:transfer_diamond_to_container
        else if "entity @s[nbt={item:{id:\"minecraft:gold_ingot\"}}]":
            function pipes:transfer_gold_to_container
        else if "entity @s[nbt={item:{id:\"minecraft:emerald\"}}]":
            function pipes:transfer_emerald_to_container
        else:
            function pipes:add_item_to_container
    else:
        # Default transfer
        function pipes:add_item_to_container

# ===== ENERGY MANAGEMENT =====
function "check_energy_level":
    # Check current energy level and provide feedback
    if "score #global pipes_energy >= 80":
        tellraw @a [{"text":"[PIPES] Energy level: High","color":"green"}]
    else if "score #global pipes_energy >= 50":
        tellraw @a [{"text":"[PIPES] Energy level: Medium","color":"yellow"}]
    else if "score #global pipes_energy >= 20":
        tellraw @a [{"text":"[PIPES] Energy level: Low","color":"orange"}]
    else:
        tellraw @a [{"text":"[PIPES] Energy level: Critical!","color":"red"}]

function "auto_recharge":
    # Automatically recharge energy from nearby redstone blocks
    if "block ~ ~-1 ~ minecraft:redstone_block":
        if "score #global pipes_energy < 100":
            scoreboard players add #global pipes_energy 1
            if "score #global pipes_debug = 1":
                tellraw @a [{"text":"[PIPES DEBUG] Auto-recharging energy","color":"green"}]
