#!/bin/bash

# Minecraft Pipes Auto-Update Script
# Automatically downloads the latest release and updates server configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO="aaron777collins/MinecraftPipes"
WORLD_DIR="world"
DATAPACKS_DIR="$WORLD_DIR/datapacks"
SERVER_PROPERTIES="server.properties"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get latest release version
get_latest_version() {
    print_status "Fetching latest release version..."
    
    if command_exists curl; then
        LATEST_VERSION=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep '"tag_name"' | cut -d'"' -f4)
    elif command_exists wget; then
        LATEST_VERSION=$(wget -qO- "https://api.github.com/repos/$REPO/releases/latest" | grep '"tag_name"' | cut -d'"' -f4)
    else
        print_error "Neither curl nor wget found. Please install one of them."
        exit 1
    fi
    
    if [ -z "$LATEST_VERSION" ]; then
        print_error "Could not fetch latest version from GitHub API"
        exit 1
    fi
    
    print_success "Latest version: $LATEST_VERSION"
    echo "$LATEST_VERSION"
}

# Function to download file
download_file() {
    local url="$1"
    local output="$2"
    
    print_status "Downloading $output..."
    
    if command_exists curl; then
        curl -L -o "$output" "$url"
    elif command_exists wget; then
        wget -O "$output" "$url"
    else
        print_error "Neither curl nor wget found. Please install one of them."
        exit 1
    fi
    
    if [ $? -eq 0 ]; then
        print_success "Downloaded $output"
    else
        print_error "Failed to download $output"
        exit 1
    fi
}

# Function to get SHA1 hash from release
get_sha1_hash() {
    local version="$1"
    local file_type="$2"
    
    local sha1_url="https://github.com/$REPO/releases/download/$version/SHA1SUMS.txt"
    local temp_file="/tmp/pipes_sha1_$$"
    
    if command_exists curl; then
        curl -s -o "$temp_file" "$sha1_url" 2>/dev/null || return 1
    elif command_exists wget; then
        wget -q -O "$temp_file" "$sha1_url" 2>/dev/null || return 1
    else
        return 1
    fi
    
    if [ -f "$temp_file" ]; then
        local hash=$(grep "$file_type" "$temp_file" | cut -d' ' -f1)
        rm -f "$temp_file"
        echo "$hash"
    else
        return 1
    fi
}

# Function to update server.properties
update_server_properties() {
    local version="$1"
    local sha1_hash="$2"
    
    print_status "Updating server.properties..."
    
    if [ ! -f "$SERVER_PROPERTIES" ]; then
        print_warning "server.properties not found. Creating new file..."
        cat > "$SERVER_PROPERTIES" << EOF
# Minecraft server properties
# Generated by Minecraft Pipes update script

# Resource pack configuration
require-resource-pack=false
resource-pack=https://github.com/$REPO/releases/download/$version/pipes_resource_pack.zip
resource-pack-id=pipes
resource-pack-prompt={"text":"Would you like the pipes resource pack?","color":"blue"}
resource-pack-sha1=$sha1_hash

# Other server settings (you can add more here)
server-port=25565
gamemode=survival
difficulty=easy
max-players=20
spawn-protection=16
view-distance=10
simulation-distance=10
EOF
        print_success "Created new server.properties"
    else
        # Update existing server.properties
        local temp_file="/tmp/server_properties_$$"
        
        # Create backup
        cp "$SERVER_PROPERTIES" "$SERVER_PROPERTIES.backup.$(date +%Y%m%d_%H%M%S)"
        print_status "Created backup: $SERVER_PROPERTIES.backup.$(date +%Y%m%d_%H%M%S)"
        
        # Update the file
        sed -i.tmp \
            -e "s|resource-pack=.*|resource-pack=https://github.com/$REPO/releases/download/$version/pipes_resource_pack.zip|" \
            -e "s|resource-pack-sha1=.*|resource-pack-sha1=$sha1_hash|" \
            "$SERVER_PROPERTIES"
        
        rm -f "$SERVER_PROPERTIES.tmp"
        print_success "Updated server.properties"
    fi
}

# Function to extract datapack
extract_datapack() {
    local version="$1"
    
    print_status "Extracting datapack..."
    
    # Remove old datapack if it exists
    if [ -d "$DATAPACKS_DIR/pipes_datapack" ]; then
        print_status "Removing old datapack..."
        rm -rf "$DATAPACKS_DIR/pipes_datapack"
    fi
    
    # Create datapacks directory if it doesn't exist
    mkdir -p "$DATAPACKS_DIR"
    
    # Extract the new datapack
    if command_exists unzip; then
        unzip -q "$DATAPACKS_DIR/pipes_datapack.zip" -d "$DATAPACKS_DIR/"
        print_success "Extracted datapack to $DATAPACKS_DIR/pipes_datapack"
    else
        print_error "unzip not found. Please install unzip."
        exit 1
    fi
}

# Function to verify downloads
verify_downloads() {
    local version="$1"
    
    print_status "Verifying downloads..."
    
    # Check if files exist
    if [ ! -f "$DATAPACKS_DIR/pipes_datapack.zip" ]; then
        print_error "Datapack zip not found!"
        return 1
    fi
    
    # Verify SHA1 hash if available
    local expected_hash=$(get_sha1_hash "$version" "pipes_datapack.zip")
    if [ -n "$expected_hash" ]; then
        if command_exists sha1sum; then
            local actual_hash=$(sha1sum "$DATAPACKS_DIR/pipes_datapack.zip" | cut -d' ' -f1)
            if [ "$actual_hash" = "$expected_hash" ]; then
                print_success "Datapack SHA1 hash verified"
            else
                print_warning "Datapack SHA1 hash mismatch (expected: $expected_hash, got: $actual_hash)"
            fi
        elif command_exists shasum; then
            local actual_hash=$(shasum -a 1 "$DATAPACKS_DIR/pipes_datapack.zip" | cut -d' ' -f1)
            if [ "$actual_hash" = "$expected_hash" ]; then
                print_success "Datapack SHA1 hash verified"
            else
                print_warning "Datapack SHA1 hash mismatch (expected: $expected_hash, got: $actual_hash)"
            fi
        else
            print_warning "SHA1 verification skipped (sha1sum/shasum not found)"
        fi
    else
        print_warning "Could not fetch expected SHA1 hash for verification"
    fi
}

# Main update function
main() {
    echo -e "${GREEN}ðŸš€ Minecraft Pipes Auto-Update Script${NC}"
    echo "=================================="
    
    # Get latest version
    LATEST_VERSION=$(get_latest_version)
    
    # Create datapacks directory if it doesn't exist
    mkdir -p "$DATAPACKS_DIR"
    
    # Download latest datapack
    DATAPACK_URL="https://github.com/$REPO/releases/download/$LATEST_VERSION/pipes_datapack.zip"
    download_file "$DATAPACK_URL" "$DATAPACKS_DIR/pipes_datapack.zip"
    
    # Get SHA1 hash for resource pack
    RESOURCE_PACK_SHA1=$(get_sha1_hash "$LATEST_VERSION" "pipes_resource_pack.zip")
    if [ -z "$RESOURCE_PACK_SHA1" ]; then
        print_warning "Could not fetch resource pack SHA1 hash. Using empty hash."
        RESOURCE_PACK_SHA1=""
    fi
    
    # Update server.properties
    update_server_properties "$LATEST_VERSION" "$RESOURCE_PACK_SHA1"
    
    # Extract datapack
    extract_datapack "$LATEST_VERSION"
    
    # Verify downloads
    verify_downloads "$LATEST_VERSION"
    
    echo ""
    print_success "Update completed successfully!"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Restart your Minecraft server"
    echo "2. Run '/reload' in-game to load the new datapack"
    echo "3. The resource pack will be offered to players automatically"
    echo ""
    echo -e "${BLUE}Updated to version:${NC} $LATEST_VERSION"
    echo -e "${BLUE}Resource pack URL:${NC} https://github.com/$REPO/releases/download/$LATEST_VERSION/pipes_resource_pack.zip"
    if [ -n "$RESOURCE_PACK_SHA1" ]; then
        echo -e "${BLUE}Resource pack SHA1:${NC} $RESOURCE_PACK_SHA1"
    fi
}

# Check if running from correct directory
if [ ! -d "$WORLD_DIR" ] && [ ! -f "$SERVER_PROPERTIES" ]; then
    print_warning "This script should be run from your Minecraft server directory."
    print_warning "Make sure you have a 'world' folder or 'server.properties' file in the current directory."
    echo ""
    print_status "Current directory: $(pwd)"
    print_status "Looking for: $WORLD_DIR or $SERVER_PROPERTIES"
    echo ""
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Run main function
main "$@"
