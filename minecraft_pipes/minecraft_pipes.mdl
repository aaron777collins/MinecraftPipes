// minecraft_pipes.mdl - Minecraft Pipes Datapack
// A comprehensive pipe system for transporting items between chests
// Inspired by classic Tekkit pipes but implemented as a datapack

pack "minecraft_pipes" "Advanced pipe system for item transportation" 82;
namespace "pipes";

// Global variables for pipe system
var num pipe_tick_counter = 0;
var num redstone_power_level = 0;
var num item_movement_speed = 2;
var num max_items_per_pipe = 4;

// Pipe block types
var num PIPE_BASIC = 1;
var num PIPE_INLET = 2;
var num PIPE_OUTLET = 3;
var num PIPE_JUNCTION = 4;

// Pipe states
var num PIPE_IDLE = 0;
var num PIPE_ACTIVE = 1;
var num PIPE_FULL = 2;
var num PIPE_ERROR = 3;

// Main tick function - runs every tick
function "main" {
    pipe_tick_counter = $pipe_tick_counter$ + 1;
    
    // Process pipe networks every 4 ticks for performance
    if "$pipe_tick_counter$ % 4 == 0" {
        execute "pipes:process_pipe_networks";
    }
    
    // Process item movement every 2 ticks
    if "$pipe_tick_counter$ % 2 == 0" {
        execute "pipes:move_items_through_pipes";
    }
    
    // Process redstone control every 10 ticks
    if "$pipe_tick_counter$ % 10 == 0" {
        execute "pipes:check_redstone_signals";
    }
    
    // Reset counter to prevent overflow
    if "$pipe_tick_counter$ > 1000" {
        pipe_tick_counter = 0;
    }
}

// Initialize pipe system
function "init" {
    // Create scoreboard objectives for pipe tracking
    scoreboard objectives add "pipe_type" dummy "Pipe Type";
    scoreboard objectives add "pipe_state" dummy "Pipe State";
    scoreboard objectives add "pipe_items" dummy "Items in Pipe";
    scoreboard objectives add "pipe_connections" dummy "Pipe Connections";
    scoreboard objectives add "redstone_power" dummy "Redstone Power";
    
    // Set up teams for pipe entities
    team add "pipe_entities";
    team modify "pipe_entities" collisionRule never;
    team modify "pipe_entities" seeFriendlyInvisibles true;
    
    say "Minecraft Pipes system initialized!";
}

// Process all pipe networks
function "process_pipe_networks" {
    // Find all pipe blocks and process them
    execute as @e[type=minecraft:marker,tag=pipe_block] at @s run function "pipes:process_single_pipe";
    
    // Find all inlet pipes and extract items
    execute as @e[type=minecraft:marker,tag=pipe_inlet] at @s run function "pipes:extract_items_from_chest";
    
    // Find all outlet pipes and deposit items
    execute as @e[type=minecraft:marker,tag=pipe_outlet] at @s run function "pipes:deposit_items_to_chest";
}

// Process a single pipe block
function "process_single_pipe" {
    // Get pipe type and state
    scoreboard players get pipe_type @s "pipe_type";
    scoreboard players get pipe_state @s "pipe_state";
    
    // Check for connected pipes
    execute "pipes:find_connected_pipes";
    
    // Update pipe state based on connections and items
    execute "pipes:update_pipe_state";
}

// Find pipes connected to current pipe
function "find_connected_pipes" {
    // Check all 6 directions for connected pipes
    // North, South, East, West, Up, Down
    var num connected_count = 0;
    
    // Check North (negative Z)
    execute positioned ~ ~ ~-1 if block ~ ~ ~ minecraft:glass run function "pipes:add_connection";
    
    // Check South (positive Z)
    execute positioned ~ ~ ~+1 if block ~ ~ ~ minecraft:glass run function "pipes:add_connection";
    
    // Check East (positive X)
    execute positioned ~+1 ~ ~ if block ~ ~ ~ minecraft:glass run function "pipes:add_connection";
    
    // Check West (negative X)
    execute positioned ~-1 ~ ~ if block ~ ~ ~ minecraft:glass run function "pipes:add_connection";
    
    // Check Up (positive Y)
    execute positioned ~ ~+1 ~ if block ~ ~ ~ minecraft:glass run function "pipes:add_connection";
    
    // Check Down (negative Y)
    execute positioned ~ ~-1 ~ if block ~ ~ ~ minecraft:glass run function "pipes:add_connection";
    
    // Store connection count
    scoreboard players set @s "pipe_connections" $connected_count$;
}

// Add a connection to the current pipe
function "add_connection" {
    connected_count = $connected_count$ + 1;
}

// Update pipe state based on connections and items
function "update_pipe_state" {
    scoreboard players get pipe_connections @s "pipe_connections";
    scoreboard players get pipe_items @s "pipe_items";
    
    // If pipe has items and connections, set to active
    if "$pipe_items$ > 0 && $pipe_connections$ > 0" {
        scoreboard players set @s "pipe_state" $PIPE_ACTIVE$;
    } else if "$pipe_items$ >= $max_items_per_pipe$" {
        scoreboard players set @s "pipe_state" $PIPE_FULL$;
    } else {
        scoreboard players set @s "pipe_state" $PIPE_IDLE$;
    }
}

// Extract items from chest connected to inlet pipe
function "extract_items_from_chest" {
    // Check redstone power first
    scoreboard players get redstone_power @s "redstone_power";
    
    // Only extract if redstone power is sufficient (or if no redstone control)
    if "$redstone_power$ >= 1" {
        // Look for chest in adjacent blocks
        execute positioned ~ ~ ~-1 if block ~ ~ ~ minecraft:chest run function "pipes:extract_from_chest_at";
        execute positioned ~ ~ ~+1 if block ~ ~ ~ minecraft:chest run function "pipes:extract_from_chest_at";
        execute positioned ~+1 ~ ~ if block ~ ~ ~ minecraft:chest run function "pipes:extract_from_chest_at";
        execute positioned ~-1 ~ ~ if block ~ ~ ~ minecraft:chest run function "pipes:extract_from_chest_at";
        execute positioned ~ ~+1 ~ if block ~ ~ ~ minecraft:chest run function "pipes:extract_from_chest_at";
        execute positioned ~ ~-1 ~ if block ~ ~ ~ minecraft:chest run function "pipes:extract_from_chest_at";
    }
}

// Extract items from a specific chest location
function "extract_from_chest_at" {
    // Check if current pipe has space
    scoreboard players get pipe_items @s "pipe_items";
    
    if "$pipe_items$ < $max_items_per_pipe$" {
        // Try to extract an item from the chest
        execute store result score temp_extract @s "pipe_items" run data get block ~ ~ ~ Items[0].Count 1;
        
        if "$temp_extract$ > 0" {
            // Successfully extracted an item
            scoreboard players add @s "pipe_items" 1;
            
            // Remove item from chest
            data modify block ~ ~ ~ Items[0].Count set value 0;
            
            // Create visual item entity for animation
            summon minecraft:item ~ ~ ~ {Item:{id:"minecraft:stone",Count:1b},Tags:["pipe_item","temp"]};
            
            // Set pipe to active state
            scoreboard players set @s "pipe_state" $PIPE_ACTIVE$;
        }
    }
}

// Move items through connected pipes
function "move_items_through_pipes" {
    // Find all active pipes with items
    execute as @e[type=minecraft:marker,tag=pipe_block] if score @s "pipe_state" matches $PIPE_ACTIVE$ at @s run function "pipes:move_items_from_pipe";
}

// Move items from current pipe to connected pipes
function "move_items_from_pipe" {
    scoreboard players get pipe_items @s "pipe_items";
    scoreboard players get pipe_connections @s "pipe_connections";
    
    if "$pipe_items$ > 0 && $pipe_connections$ > 0" {
        // Find a connected pipe with space
        execute "pipes:find_available_connection";
        
        // If found, move one item
        if "$found_connection$ == 1" {
            scoreboard players remove @s "pipe_items" 1;
            scoreboard players add @s "target_pipe" "pipe_items" 1;
            
            // Move visual item entity
            execute as @e[type=minecraft:item,tag=pipe_item,limit=1] at @s run tp @s ~ ~ ~;
        }
    }
}

// Find an available connection for item movement
function "find_available_connection" {
    var num found_connection = 0;
    
    // Check each direction for pipes with space
    execute positioned ~ ~ ~-1 if block ~ ~ ~ minecraft:glass run function "pipes:check_connection_space";
    execute positioned ~ ~ ~+1 if block ~ ~ ~ minecraft:glass run function "pipes:check_connection_space";
    execute positioned ~+1 ~ ~ if block ~ ~ ~ minecraft:glass run function "pipes:check_connection_space";
    execute positioned ~-1 ~ ~ if block ~ ~ ~ minecraft:glass run function "pipes:check_connection_space";
    execute positioned ~ ~+1 ~ if block ~ ~ ~ minecraft:glass run function "pipes:check_connection_space";
    execute positioned ~ ~-1 ~ if block ~ ~ ~ minecraft:glass run function "pipes:check_connection_space";
}

// Check if a connection has space for items
function "check_connection_space" {
    // Find pipe entity at this location
    execute as @e[type=minecraft:marker,tag=pipe_block] at @s if entity @s[distance=..0.1] run function "pipes:check_pipe_space";
}

// Check if a specific pipe has space
function "check_pipe_space" {
    scoreboard players get pipe_items @s "pipe_items";
    
    if "$pipe_items$ < $max_items_per_pipe$" {
        found_connection = 1;
        scoreboard players operation @s "target_pipe" = @s "pipe_items";
    }
}

// Deposit items to chest connected to outlet pipe
function "deposit_items_to_chest" {
    scoreboard players get pipe_items @s "pipe_items";
    
    if "$pipe_items$ > 0" {
        // Look for chest in adjacent blocks
        execute positioned ~ ~ ~-1 if block ~ ~ ~ minecraft:chest run function "pipes:deposit_to_chest_at";
        execute positioned ~ ~ ~+1 if block ~ ~ ~ minecraft:chest run function "pipes:deposit_to_chest_at";
        execute positioned ~+1 ~ ~ if block ~ ~ ~ minecraft:chest run function "pipes:deposit_to_chest_at";
        execute positioned ~-1 ~ ~ if block ~ ~ ~ minecraft:chest run function "pipes:deposit_to_chest_at";
        execute positioned ~ ~+1 ~ if block ~ ~ ~ minecraft:chest run function "pipes:deposit_to_chest_at";
        execute positioned ~ ~-1 ~ if block ~ ~ ~ minecraft:chest run function "pipes:deposit_to_chest_at";
    }
}

// Deposit items to a specific chest location
function "deposit_to_chest_at" {
    // Try to add item to chest
    data modify block ~ ~ ~ Items append value {id:"minecraft:stone",Count:1b};
    
    // Remove item from pipe
    scoreboard players remove @s "pipe_items" 1;
    
    // Remove visual item entity
    kill @e[type=minecraft:item,tag=pipe_item,limit=1];
    
    // Update pipe state
    scoreboard players get pipe_items @s "pipe_items";
    if "$pipe_items$ == 0" {
        scoreboard players set @s "pipe_state" $PIPE_IDLE$;
    }
}

// Check redstone signals for inlet pipes
function "check_redstone_signals" {
    execute as @e[type=minecraft:marker,tag=pipe_inlet] at @s run function "pipes:check_single_redstone";
}

// Check redstone signal for a single inlet pipe
function "check_single_redstone" {
    // Get redstone power level at pipe location
    execute store result score redstone_power @s "redstone_power" run data get block ~ ~ ~ "power";
    
    // Store the power level
    scoreboard players set @s "redstone_power" $redstone_power$;
}

// Create a pipe block at current location
function "create_pipe" {
    // Place glass block (temporary pipe representation)
    setblock ~ ~ ~ minecraft:glass;
    
    // Create pipe entity marker
    summon minecraft:marker ~ ~ ~ {Tags:["pipe_block","pipe_basic"]};
    
    // Initialize pipe properties
    scoreboard players set @e[type=minecraft:marker,tag=pipe_basic,limit=1,sort=nearest] "pipe_type" $PIPE_BASIC$;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_basic,limit=1,sort=nearest] "pipe_state" $PIPE_IDLE$;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_basic,limit=1,sort=nearest] "pipe_items" 0;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_basic,limit=1,sort=nearest] "pipe_connections" 0;
    
    say "Pipe created at current location!";
}

// Create an inlet pipe
function "create_inlet_pipe" {
    // Place glass block with different color (temporary)
    setblock ~ ~ ~ minecraft:red_stained_glass;
    
    // Create inlet pipe entity
    summon minecraft:marker ~ ~ ~ {Tags:["pipe_block","pipe_inlet"]};
    
    // Initialize inlet pipe properties
    scoreboard players set @e[type=minecraft:marker,tag=pipe_inlet,limit=1,sort=nearest] "pipe_type" $PIPE_INLET$;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_inlet,limit=1,sort=nearest] "pipe_state" $PIPE_IDLE$;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_inlet,limit=1,sort=nearest] "pipe_items" 0;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_inlet,limit=1,sort=nearest] "pipe_connections" 0;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_inlet,limit=1,sort=nearest] "redstone_power" 0;
    
    say "Inlet pipe created! Place next to a chest and power with redstone.";
}

// Create an outlet pipe
function "create_outlet_pipe" {
    // Place glass block with different color (temporary)
    setblock ~ ~ ~ minecraft:blue_stained_glass;
    
    // Create outlet pipe entity
    summon minecraft:marker ~ ~ ~ {Tags:["pipe_block","pipe_outlet"]};
    
    // Initialize outlet pipe properties
    scoreboard players set @e[type=minecraft:marker,tag=pipe_outlet,limit=1,sort=nearest] "pipe_type" $PIPE_OUTLET$;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_outlet,limit=1,sort=nearest] "pipe_state" $PIPE_IDLE$;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_outlet,limit=1,sort=nearest] "pipe_items" 0;
    scoreboard players set @e[type=minecraft:marker,tag=pipe_outlet,limit=1,sort=nearest] "pipe_connections" 0;
    
    say "Outlet pipe created! Place next to a chest to deposit items.";
}

// Debug function to show pipe information
function "debug_pipe" {
    execute as @e[type=minecraft:marker,tag=pipe_block] at @s run function "pipes:show_pipe_info";
}

// Show information about a single pipe
function "show_pipe_info" {
    scoreboard players get pipe_type @s "pipe_type";
    scoreboard players get pipe_state @s "pipe_state";
    scoreboard players get pipe_items @s "pipe_items";
    scoreboard players get pipe_connections @s "pipe_connections";
    
    tellraw @a [{"text":"Pipe at ","color":"gray"},{"text":"$~$ $~$ $~$","color":"yellow"},{"text":" - Type: ","color":"gray"},{"text":"$pipe_type$","color":"green"},{"text":" State: ","color":"gray"},{"text":"$pipe_state$","color":"blue"},{"text":" Items: ","color":"gray"},{"text":"$pipe_items$","color":"red"},{"text":" Connections: ","color":"gray"},{"text":"$pipe_connections$","color":"purple"}];
}

// Hook to run main function every tick
on_tick "pipes:main";

// Hook to run init function on load
on_load "pipes:init";
